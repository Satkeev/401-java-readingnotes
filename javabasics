### JAVA BASICS
##Variables
You've already learned that objects store their state in fields. However, the Java programming language also uses the term
"variable" as well. This section discusses this relationship, plus variable naming rules and conventions, basic data types
(primitive types, character strings, and arrays), default values, and literals.
Operators
This section describes the operators of the Java programming language. It presents the most commonly-used operators first,
and the less commonly-used operators last. Each discussion includes code samples that you can compile and run.
Expressions, Statements, and Blocks

Operators may be used in building expressions, which compute values; expressions are the core components of statements;
statements may be grouped into blocks. This section discusses expressions, statements, and blocks using example code 
that you've already seen.
Control Flow Statements
This section describes the control flow statements supported by the Java programming language. It covers the decisions-making, 
looping, and branching statements that enable your programs to conditionally execute particular blocks of code.
Primitive Data Types
The Java programming language is statically-typed, which means that all variables must first be declared before they can be used.
This involves stating the variable's type and name, as you've already seen:

int gear = 1;
Doing so tells your program that a field named "gear" exists, holds numerical data, and has an initial value of "1".
A variable's data type determines the values it may contain, plus the operations that may be performed on it. In addition 
to int, the Java programming language supports seven other primitive data types. A primitive type is predefined by the
language and is named by a reserved keyword. Primitive values do not share state with other primitive values. The 
eight primitive data types supported by the Java programming language are:

byte: The byte data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value 
of 127 (inclusive). The byte data type can be useful for saving memory in large arrays, where the memory savings actually
matters. They can also be used in place of int where their limits help to clarify your code; the fact that a variable's
range is limited can serve as a form of documentation.

short: The short data type is a 16-bit signed two's complement integer. It has a minimum value of -32,768 and a maximum 
value of 32,767 (inclusive). As with byte, the same guidelines apply: you can use a short to save memory in large arrays,
in situations where the memory savings actually matters.

int: By default, the int data type is a 32-bit signed two's complement integer, which has a minimum value of -231 and a 
maximum value of 231-1. In Java SE 8 and later, you can use the int data type to represent an unsigned 32-bit integer,
which has a minimum value of 0 and a maximum value of 232-1. Use the Integer class to use int data type as an unsigned
integer. See the section The Number Classes for more information. Static methods like compareUnsigned, divideUnsigned
etc have been added to the Integer class to support the arithmetic operations for unsigned integers.

long: The long data type is a 64-bit two's complement integer. The signed long has a minimum value of -263 and a maximum
value of 263-1. In Java SE 8 and later, you can use the long data type to represent an unsigned 64-bit long, which has
a minimum value of 0 and a maximum value of 264-1. Use this data type when you need a range of values wider than those
provided by int. The Long class also contains methods like compareUnsigned, divideUnsigned etc to support arithmetic 
operations for unsigned long.

float: The float data type is a single-precision 32-bit IEEE 754 floating point. Its range of values is beyond the scope
of this discussion, but is specified in the Floating-Point Types, Formats, and Values section of the Java Language
Specification. As with the recommendations for byte and short, use a float (instead of double) if you need to save memory
in large arrays of floating point numbers. This data type should never be used for precise values, such as currency. For 
that, you will need to use the java.math.BigDecimal class instead. Numbers and Strings covers BigDecimal and other useful
classes provided by the Java platform.

double: The double data type is a double-precision 64-bit IEEE 754 floating point. Its range of values is beyond the scope
of this discussion, but is specified in the Floating-Point Types, Formats, and Values section of the Java Language Specification.
For decimal values, this data type is generally the default choice. As mentioned above, this data type should never be used
for precise values, such as currency.

boolean: The boolean data type has only two possible values: true and false. Use this data type for simple flags that track
true/false conditions. This data type represents one bit of information, but its "size" isn't something that's precisely defined.

char: The char data type is a single 16-bit Unicode character. It has a minimum value of '\u0000' (or 0) and a maximum value 
of '\uffff' (or 65,535 inclusive).
Arrays
An array is a container object that holds a fixed number of values of a single type. The length of an array is established
when the array is created. After creation, its length is fixed. You have seen an example of arrays already, in the main 
method of the "Hello World!" application. This section discusses arrays in greater detail.

Illustration of an array as 10 boxes numbered 0 through 9; an index of 0 indicates the first element in the array
An array of 10 elements.
Each item in an array is called an element, and each element is accessed by its numerical index. As shown in the preceding illustration,
numbering begins with 0. The 9th element, for example, would therefore be accessed at index 8.
Summary of Variables
The Java programming language uses both "fields" and "variables" as part of its terminology. Instance variables (non-static fields)
are unique to each instance of a class. Class variables (static fields) are fields declared with the static modifier; there 
is exactly one copy of a class variable, regardless of how many times the class has been instantiated. Local variables store
temporary state inside a method. Parameters are variables that provide extra information to a method; both local variables 
and parameters are always classified as "variables" (not "fields"). When naming your fields or variables, there are rules 
and conventions that you should (or must) follow.

The eight primitive data types are: byte, short, int, long, float, double, boolean, and char. The java.lang.String class 
represents character strings. The compiler will assign a reasonable default value for fields of the above types; for local
variables, a default value is never assigned. A literal is the source code representation of a fixed value. An array is a
container object that holds a fixed number of values of a single type. The length of an array is established when the array
is created. After creation, its length is fixed.
